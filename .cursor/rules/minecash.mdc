---
description: # MineCash - Complete Project Overview  ## üéØ Project Summary  **MineCash** is a Minecraft-themed online casino web application that provides an immersive gambling experience for Minecraft community members. Users authenticate via Discord, play casino games using an internal currency called GC (Gold Coins), and interact in real-time with other players.  ### Key Statistics - **Project Type**: Full-stack web application - **Tech Stack**: React + TypeScript + Supabase + Discord OAuth2 - **Target Audience**: Minecraft community members - **Currency System**: GC (Gold Coins) - internal virtual currency - **Authentication**: Discord OAuth2 exclusively  ---  ## üèóÔ∏è Technical Architecture  ### Frontend Stack - **Framework**: React with Remix/React Router v6 - **Language**: TypeScript (strict type checking) - **Styling**: Tailwind CSS with custom color palette - **Build Tool**: Vite - **State Management**: React Context API - **Real-time**: WebSockets (planned for live chat/games)  ### Backend & Infrastructure - **BaaS**: Supabase (PostgreSQL + Auth + Real-time + Storage) - **Authentication**: Discord OAuth2 integration - **Database**: PostgreSQL with Row Level Security (RLS) - **API**: RESTful endpoints via Supabase client - **File Storage**: Supabase Storage for assets  ### External Integrations - **Discord API**: User authentication, profile data, server membership verification - **Discord Bot**: Ticket system, user verification, support integration  ---  ## üé® Design System & Branding  ### Visual Identity - **Theme**: Dark luxury casino aesthetic with Minecraft elements - **Logo**: Official MineCash logo featuring gold, red, and Minecraft pickaxe - **Typography**: Clean, readable fonts with gaming appeal  ### Color Palette ```css Primary Gold: #FFD700 Secondary Dark: #2C2C2C   Accent Red: #E63946 Background Black: #0F0F0F Text White: #FFFFFF Success Green: #28A745 Warning Orange: #FFC107 Error Red: #DC3545 ```  ### UI Principles - **Responsive Design**: Mobile-first approach - **Animations**: Smooth transitions and micro-interactions - **Accessibility**: WCAG 2.1 AA compliance - **Performance**: Optimized loading and rendering  ---  ## üìÅ Project Structure Analysis  ``` Minecash/ ‚îú‚îÄ‚îÄ app/                          # Main application code ‚îÇ   ‚îú‚îÄ‚îÄ components/              # Reusable UI components ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Button.tsx          # Custom button component ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ GCBalanceDisplay.tsx # User balance display ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Header.tsx          # Global navigation header ‚îÇ   ‚îú‚îÄ‚îÄ contexts/               # React Context providers ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AuthContext.tsx     # User authentication state ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ GCBalanceContext.tsx # GC balance management ‚îÇ   ‚îú‚îÄ‚îÄ lib/                    # Utility libraries ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ database.types.ts   # TypeScript database types ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ supabase.ts        # Supabase client configuration ‚îÇ   ‚îú‚îÄ‚îÄ routes/                 # Application pages/routes ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ casino/            # Casino game pages ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ blackjack.tsx ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ crash.tsx ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hi-lo.tsx ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ roulette.tsx ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ slots.tsx ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ admin.tsx          # Admin dashboard ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth-callback.tsx  # Discord OAuth callback ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ home.tsx           # Landing page ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ profile.tsx        # User profile & stats ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ support.tsx        # Help & ticket system ‚îÇ   ‚îú‚îÄ‚îÄ app.css               # Global styles ‚îÇ   ‚îú‚îÄ‚îÄ root.tsx             # App root component ‚îÇ   ‚îî‚îÄ‚îÄ routes.ts            # Route configuration ‚îú‚îÄ‚îÄ public/                   # Static assets ‚îÇ   ‚îî‚îÄ‚îÄ images/              # Image assets ‚îú‚îÄ‚îÄ supabase/                # Database & backend (future) ‚îÇ   ‚îú‚îÄ‚îÄ migrations/          # Database migrations ‚îÇ   ‚îî‚îÄ‚îÄ functions/           # Edge functions ‚îî‚îÄ‚îÄ Configuration files... ```  ---  ## üîê Authentication & User Management  ### Discord OAuth2 Flow 1. **Login Initiation**: User clicks "Login with Discord" 2. **OAuth Redirect**: Redirect to Discord authorization 3. **Callback Processing**: Handle OAuth callback at `/auth-callback` 4. **User Creation**: Create/update user record in Supabase 5. **Session Management**: Maintain auth state via AuthContext  ### User Data Collection ```typescript interface User {   id: string;           // Supabase UUID   discord_id: string;   // Discord user ID   username: string;     // Discord username   avatar_url?: string;  // Discord avatar   email?: string;       // Discord email   gc_balance: number;   // Gold Coins balance   created_at: string;   // Account creation   updated_at: string;   // Last update   is_admin: boolean;    // Admin privileges   is_banned: boolean;   // Ban status } ```  ### Authorization Levels - **Anonymous**: Can view landing page only - **Authenticated**: Full casino access, profile management - **Admin**: Dashboard access, user management, system controls - **Banned**: Restricted access, cannot play games  ---  ## üé∞ Casino Games System  ### Supported Games 1. **Blackjack**: Classic card game with dealer 2. **Roulette**: European/American roulette variants 3. **Crash**: Multiplier-based betting game 4. **Slots**: Multiple themed slot machines 5. **Hi-Lo**: High/low card prediction game  ### Game Architecture ```typescript interface GameSession {   id: string;   user_id: string;   game_type: 'blackjack' | 'roulette' | 'crash' | 'slots' | 'hi-lo';   bet_amount: number;   result: 'win' | 'loss' | 'push';   payout: number;   game_data: object;    // Game-specific data   created_at: string; } ```  ### Common Game Features - **Bet Validation**: Ensure user has sufficient GC - **RNG System**: Provably fair random number generation - **Real-time Updates**: Live game state synchronization - **History Tracking**: Complete game history per user - **Animations**: Engaging visual feedback  ---  ## üí∞ GC (Gold Coins) Economy  ### Currency Management - **Internal Currency**: GC is not real money - **Starting Balance**: New users receive starter GC - **Deposit System**: Users request GC via Discord tickets - **Withdrawal System**: Users can withdraw GC via tickets - **Balance Tracking**: Real-time balance updates  ### GC Balance Context ```typescript interface GCBalanceContextType {   balance: number;   isLoading: boolean;   updateBalance: (newBalance: number) => void;   addBalance: (amount: number) => void;   subtractBalance: (amount: number) => void;   refreshBalance: () => Promise<void>; } ```  ### Transaction System ```typescript interface Transaction {   id: string;   user_id: string;   type: 'deposit' | 'withdrawal' | 'game_win' | 'game_loss';   amount: number;   description: string;   created_at: string; } ```  ---  ## üõ†Ô∏è Admin Dashboard Features  ### User Management - **User Search**: Find users by Discord username/ID - **Balance Management**: Adjust user GC balances - **Ban System**: Temporary/permanent user bans - **Account Details**: View complete user profiles  ### System Analytics - **GC Overview**: Total circulation, deposits, withdrawals - **Game Statistics**: Play rates, win/loss ratios, popular games - **User Metrics**: Registration trends, active users - **Financial Reports**: GC flow analysis  ### Game Configuration - **House Edge**: Adjust game odds and payouts - **Bet Limits**: Set minimum/maximum bet amounts - **Game Availability**: Enable/disable specific games - **Multipliers**: Configure game-specific multipliers  ### Support Tools - **Ticket Management**: View/respond to user tickets - **Activity Logs**: Track user and admin actions - **System Monitoring**: Performance and error tracking  ---  ## üé´ Support & Ticket System  ### Discord Integration - **Server Membership**: Check if user is in Discord server - **Ticket Creation**: Automatic Discord ticket creation - **Support Categories**: Deposits, withdrawals, technical issues, reports  ### FAQ System - **Collapsible Sections**: Organized help topics - **Search Functionality**: Find relevant help articles - **Dynamic Content**: Admin-editable FAQ entries  ---  ## üåç User Experience Flow  ### New User Journey 1. **Landing Page**: Introduction to MineCash features 2. **Discord Login**: One-click authentication 3. **Profile Setup**: Automatic profile creation 4. **Welcome Bonus**: Starter GC allocation 5. **Game Selection**: Choose from available casino games 6. **First Bet**: Guided betting experience  ### Returning User Flow 1. **Auto-Login**: Persistent Discord session 2. **Balance Check**: Current GC display 3. **Game History**: Recent activity review 4. **Continue Playing**: Resume favorite games  ---  ## üìä Database Schema Overview  ### Core Tables ```sql -- Users table users (   id uuid primary key,   discord_id text unique,   username text,   avatar_url text,   email text,   gc_balance numeric default 1000,   is_admin boolean default false,   is_banned boolean default false,   created_at timestamp,   updated_at timestamp );  -- Game sessions game_sessions (   id uuid primary key,   user_id uuid references users(id),   game_type text,   bet_amount numeric,   result text,   payout numeric,   game_data jsonb,   created_at timestamp );  -- Transactions transactions (   id uuid primary key,   user_id uuid references users(id),   type text,   amount numeric,   description text,   created_at timestamp );  -- Support tickets support_tickets (   id uuid primary key,   user_id uuid references users(id),   discord_ticket_id text,   category text,   status text,   created_at timestamp ); ```  ### Security Implementation - **Row Level Security (RLS)**: Enabled on all tables - **User Isolation**: Users can only access their own data - **Admin Privileges**: Special policies for admin access - **Audit Logging**: Track all database changes  ---  ## üöÄ Development Workflow  ### Environment Setup 1. **Clone Repository**: Get latest codebase 2. **Install Dependencies**: `npm install` 3. **Environment Variables**: Configure Supabase and Discord 4. **Database Setup**: Run migrations and seed data 5. **Development Server**: `npm run dev`  ### Code Standards - **TypeScript**: Strict type checking enabled - **ESLint**: Consistent code formatting - **Prettier**: Automated code formatting - **Git Hooks**: Pre-commit linting and testing  ### Testing Strategy - **Unit Tests**: Component and utility testing - **Integration Tests**: API and database testing - **E2E Tests**: Full user flow testing - **Manual Testing**: Game functionality verification  ---  ## üîß Configuration & Environment  ### Required Environment Variables ```env # Supabase Configuration SUPABASE_URL=your_supabase_project_url SUPABASE_ANON_KEY=your_supabase_anon_key  # Discord OAuth2 DISCORD_CLIENT_ID=your_discord_client_id DISCORD_CLIENT_SECRET=your_discord_client_secret DISCORD_BOT_TOKEN=your_discord_bot_token  # Application SITE_URL=your_site_url NODE_ENV=development|production ```  ### Build Configuration - **Vite**: Fast development and optimized production builds - **TypeScript**: Strict compilation settings - **Tailwind**: Purged CSS for optimal bundle size - **Assets**: Optimized image handling  ---  ## üìà Performance Considerations  ### Frontend Optimization - **Code Splitting**: Route-based lazy loading - **Asset Optimization**: Compressed images and fonts - **Caching**: Efficient browser and CDN caching - **Bundle Analysis**: Regular bundle size monitoring  ### Backend Optimization - **Database Indexing**: Optimized queries - **Connection Pooling**: Efficient database connections - **Caching Strategy**: Redis for frequently accessed data - **Real-time Efficiency**: Optimized WebSocket usage  ---  ## üîí Security Measures  ### Data Protection - **Encryption**: All sensitive data encrypted at rest - **HTTPS**: TLS 1.3 for all communications - **Input Validation**: Comprehensive input sanitization - **SQL Injection Prevention**: Parameterized queries  ### Authentication Security - **OAuth2**: Secure Discord integration - **Session Management**: Secure session handling - **CSRF Protection**: Cross-site request forgery prevention - **Rate Limiting**: API abuse prevention  ---  ## üöÄ Deployment & Hosting  ### Production Environment - **Platform**: Vercel/Netlify for frontend - **Database**: Supabase managed PostgreSQL - **CDN**: Global asset distribution - **Monitoring**: Error tracking and performance monitoring  ### CI/CD Pipeline - **Automated Testing**: Run tests on all commits - **Build Verification**: Ensure successful builds - **Database Migrations**: Automated schema updates - **Deployment**: Automated production deployments  ---  ## üìã Future Roadmap  ### Phase 1 Enhancements - **Mobile App**: React Native mobile version - **Additional Games**: Poker, Baccarat, Dice games - **Tournament System**: Scheduled competitive events - **Leaderboards**: Player rankings and achievements  ### Phase 2 Features - **Live Dealers**: Video streaming integration - **Social Features**: Friend systems, chat rooms - **VIP Program**: Loyalty rewards and benefits - **Multi-language**: Internationalization support  ### Phase 3 Expansion - **API Platform**: Third-party game integration - **White Label**: Customizable casino platform - **Cryptocurrency**: Alternative payment methods - **Analytics Dashboard**: Advanced reporting tools  ---  ## ü§ù Contributing Guidelines  ### Code Contribution 1. **Fork Repository**: Create personal fork 2. **Feature Branch**: Create feature-specific branch 3. **Development**: Follow coding standards 4. **Testing**: Ensure all tests pass 5. **Pull Request**: Submit for review  ### Issue Reporting - **Bug Reports**: Detailed reproduction steps - **Feature Requests**: Clear use case description - **Documentation**: Improvements and corrections - **Security Issues**: Private disclosure process  ---  ## üìû Support & Contact  ### Developer Support - **Documentation**: Comprehensive API and setup guides - **Discord Server**: Community support and discussions - **Issue Tracker**: GitHub issues for bug reports - **Email Support**: Direct developer contact  ### User Support - **In-App Help**: Built-in FAQ and guides - **Discord Tickets**: Automated support system - **Community**: User forums and discussions - **Video Tutorials**: Step-by-step guides  ---  *This document serves as the definitive guide for understanding the MineCash project architecture, features, and development processes. It should be referenced by all team members and AI assistants working on the project.*
alwaysApply: true
---
